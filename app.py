from dotenv import load_dotenv
import os
import logging
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler,  CallbackContext, PollHandler, PollAnswerHandler, MessageHandler, filters, CallbackQueryHandler

load_dotenv()
logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = [833046485]
poll_results = {}
completed_users = set()

bot = Bot(token=TOKEN)

start_message = (
    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ &quot;<b>–°–° –ú–∞—Ä–∫–µ—Ç</b>&quot; ‚Äì –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –æ—Ç –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ —Å–æ–≤–µ—Ç–∞ "
    f"–æ–±—â–µ–∂–∏—Ç–∏—è ‚Ññ1 üéâ\n\n"
    f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ –∑–∞–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –ª—é–±–∏–º—ã–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–∏—Ç–∫–∏, "
    f"–Ω–µ –≤—ã—Ö–æ–¥—è –∏–∑ –æ–±—â–µ–∂–∏—Ç–∏—è. üí™\n\n"
    f"‚ú® <b>–ß—Ç–æ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤ –±–æ—Ç–µ?</b>\n"
    f"- –£–¥–æ–±–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤.\n"
    f"- –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏ –Ω–∞–ª–∏—á–∏–µ.\n"
    f"- –ë—ã—Å—Ç—Ä–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.\n"
    f"- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
    f"üõí <b>–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å?</b>\n"
    f"1. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫ –∏–∑ –º–µ–Ω—é.\n"
    f"2. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑.\n"
    f"3. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏!\n\n"
    f"üìå <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∂–∏—Ç–µ–ª–µ–π –æ–±—â–µ–∂–∏—Ç–∏—è ‚Ññ1.\n\n"
    f"–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–∏—à–∏—Ç–µ –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É: <a href='https://t.me/EmilBAD'>t.me/EmilBAD</a>.\n\n"
    f"üëâ –î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º –≤–∞—à –¥–µ–Ω—å –±–æ–¥—Ä–µ–µ –≤–º–µ—Å—Ç–µ —Å &quot;<b>–°–° –ú–∞—Ä–∫–µ—Ç</b>&quot;! üöÄ"
)

demo_quest = (f"–ú—ã —Ö–æ—Ç–∏–º —É–∑–Ω–∞—Ç—å –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ "
            f"–≤ –æ–±—â–µ–∂–∏—Ç–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω–æ–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –¥–ª—è –≤–∞—Å. üí°\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–∏ –ª—é–±–∏–º—ã–µ –Ω–∞–ø–∏—Ç–∫–∏. "
            f"–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç–æ–∏—Ç –≤–∫–ª—é—á–∏—Ç—å –≤ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç! üõí\n\n"
            f"–û–ø—Ä–æ—Å –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –º–∏–Ω—É—Ç—É, –∞ –≤–∞—à –≤–∫–ª–∞–¥ —Å–¥–µ–ª–∞–µ—Ç –Ω–∞—à—É –Ω–µ–±–æ–ª—å—à—É—é —Ç–æ—Ä–≥–æ–≤–ª—é –ª—É—á—à–µ! üòä")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

optionsDrink = ["Red Bull", "Gorilla", "Adrenaline Rush", "Flash", "LitEnergy", "LitEnergy(–¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ)", "Burn", "Volt", "Drive", "Jaguar"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="opros")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=start_message, parse_mode="HTML")
    await context.bot.send_message(chat_id=update.effective_chat.id, text=demo_quest, reply_markup=reply_markup)

async def opros(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print(completed_users)
    if user_id in completed_users:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üòä"
        )
        return

    question = "–ö–∞–∫–∏–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ? (–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)"
    
    is_anonymous = False  # –°–¥–µ–ª–∞—Ç—å –æ–ø—Ä–æ—Å –Ω–µ–∞–Ω–æ–Ω–∏–º–Ω—ã–º
    allows_multiple_answers = True  # –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤

    await context.bot.send_poll(
        chat_id=update.effective_chat.id,
        question=question,
        options=optionsDrink,
        is_anonymous=is_anonymous,
        allows_multiple_answers=allows_multiple_answers
    )
    user_id = update.effective_user.id
    completed_users.add(user_id)

async def handle_poll_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global poll_results
    try:
        selected_options = set(update.poll_answer.option_ids)
        poll_results = {i: 0 for i in optionsDrink}
        print(poll_results)
        for option_id in selected_options:
            poll_results[optionsDrink[option_id]] += 1
        logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã {poll_results}")
    except AttributeError:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–ø—Ä–æ—Å")


async def send_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global poll_results
    if update.effective_user.id not in ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    print(poll_results)
    if not poll_results:
        await update.message.reply_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    stats_message = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ä–æ—Å–æ–≤:</b>\n"
    stats_message += f"–ö–æ–ª-–≤–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö: {len(completed_users)} \n"
    for poll_name, votes in poll_results.items():
        stats_message += f"–í–∞—Ä–∏–∞–Ω—Ç {poll_name}: {100 * (float(votes)/float(len(completed_users))) if len(completed_users) != 0 and votes != 0 else 0}% –≥–æ–ª–æ—Å–æ–≤\n"
    
    await update.message.reply_text(stats_message, parse_mode="HTML")


if __name__ == '__main__':
    application = ApplicationBuilder().token(TOKEN).build()

    start_handler = CommandHandler('start', start)
    application.add_handler(start_handler)
    application.add_handler(PollAnswerHandler(handle_poll_answer))
    application.add_handler(CommandHandler("statistics", send_statistics))
    application.add_handler(CallbackQueryHandler(opros, pattern="^opros$"))
    
    application.run_polling()