from dotenv import load_dotenv
import os
import json
import logging
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler,  CallbackContext, ConversationHandler, PollHandler, PollAnswerHandler, MessageHandler, filters, CallbackQueryHandler, MessageHandler

load_dotenv()
logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = [833046485]
WAITING_FOR_ITEM_NUMBER = 1
AGE_CONFIRM_KEYBOARD = [["–ú–Ω–µ –µ—Å—Ç—å 18 –ª–µ—Ç"], ["–ú–Ω–µ –Ω–µ—Ç 18 –ª–µ—Ç"]]
poll_results = {}
completed_users = set()

bot = Bot(token=TOKEN)

start_message = (
    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ &quot;<b>–°–° –ú–∞—Ä–∫–µ—Ç</b>&quot; ‚Äì –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –æ—Ç –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ —Å–æ–≤–µ—Ç–∞ "
    f"–æ–±—â–µ–∂–∏—Ç–∏—è ‚Ññ1 üéâ\n\n"
    f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ –∑–∞–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –ª—é–±–∏–º—ã–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–∏—Ç–∫–∏, "
    f"–Ω–µ –≤—ã—Ö–æ–¥—è –∏–∑ –æ–±—â–µ–∂–∏—Ç–∏—è. üí™\n\n"
    f"‚ú® <b>–ß—Ç–æ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤ –±–æ—Ç–µ?</b>\n"
    f"- –£–¥–æ–±–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤.\n"
    f"- –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏ –Ω–∞–ª–∏—á–∏–µ.\n"
    f"- –ë—ã—Å—Ç—Ä–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.\n"
    f"- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
    f"üõí <b>–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å?</b>\n"
    f"1. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫ –∏–∑ –º–µ–Ω—é.\n"
    f"2. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑.\n"
    f"3. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏!\n\n"
    f"üìå <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∂–∏—Ç–µ–ª–µ–π –æ–±—â–µ–∂–∏—Ç–∏—è ‚Ññ1.\n\n"
    f"–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–∏—à–∏—Ç–µ –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É: <a href='https://t.me/EmilBAD'>t.me/EmilBAD</a>.\n\n"
    f"üëâ –î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º –≤–∞—à –¥–µ–Ω—å –±–æ–¥—Ä–µ–µ –≤–º–µ—Å—Ç–µ —Å &quot;<b>–°–° –ú–∞—Ä–∫–µ—Ç</b>&quot;!üöÄ \n\n"
    f"<b>–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É ‚Üí –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É ‚Üí –ö–æ—Ä–∑–∏–Ω–∞ ‚Üí –û–ø–ª–∞—Ç–∞</b>"
)

# demo_quest = (f"–ú—ã —Ö–æ—Ç–∏–º —É–∑–Ω–∞—Ç—å –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ "
#             f"–≤ –æ–±—â–µ–∂–∏—Ç–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω–æ–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –¥–ª—è –≤–∞—Å. üí°\n\n"
#             f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–∏ –ª—é–±–∏–º—ã–µ –Ω–∞–ø–∏—Ç–∫–∏. "
#             f"–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç–æ–∏—Ç –≤–∫–ª—é—á–∏—Ç—å –≤ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç! üõí\n\n"
#             f"–û–ø—Ä–æ—Å –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –º–∏–Ω—É—Ç—É, –∞ –≤–∞—à –≤–∫–ª–∞–¥ —Å–¥–µ–ª–∞–µ—Ç –Ω–∞—à—É –Ω–µ–±–æ–ª—å—à—É—é —Ç–æ—Ä–≥–æ–≤–ª—é –ª—É—á—à–µ! üòä")



logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

optionsDrink = ["Red Bull", "Gorilla", "Adrenaline Rush", "Flash", "LitEnergy", "LitEnergy(–¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ)", "Burn", "Volt", "Drive", "Jaguar"]

BUYKEYBOARD = [["–ö –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É", "–ö–æ—Ä–∑–∏–Ω–∞"], ["–ë–∞–ª–ª—ã","–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞"]]
CARTKEYBOARD = [["–û–ø–ª–∞—Ç–∞", "–ö –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É"],["–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É"]]

USERS_FILE = "users.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_users():
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as file:
            data = json.load(file)
            return data.get("chat_ids", [])  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ chat_id
    except (FileNotFoundError, json.JSONDecodeError):
        return []  # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –ø–æ–≤—Ä–µ–∂–¥—ë–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_users(users):
    with open(USERS_FILE, "w", encoding="utf-8") as file:
        json.dump({"chat_ids": users}, file, ensure_ascii=False, indent=4)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_user(chat_id):
    users = load_users()
    if chat_id not in users:
        users.append(chat_id)
        save_users(users)

def open_json():
    with open("drinks.json", "r", encoding="utf-8") as file:
        return json.load(file)

def save_drinks(data):
    with open("drinks.json", "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

DRINKS = open_json()

def calculate_total(cart: dict) -> int:
    global DRINKS, total
    data = DRINKS
    total = 0
    for brand, flavors in cart.items():
        for flavor, quantity in flavors.items():
            # –ù–∞—Ö–æ–¥–∏–º —Ü–µ–Ω—É –∏–∑ DRINKS
            price = data["drinks"][brand]["flavors"][flavor]["price"]
            total += price * quantity
    return total

async def clear_cart_after_timeout(context: CallbackContext):
    chat_id = context.job.chat_id
    context.user_data.pop("cart", None)
    await context.bot.send_message(chat_id=chat_id, text="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    chat_id = update.message.chat_id

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = load_users()

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
    if chat_id not in users:
        add_user(chat_id)
    keyboard = [
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="opros")]
    ]
    reply_markup = ReplyKeyboardMarkup(BUYKEYBOARD, resize_keyboard=True)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=start_message, reply_markup=reply_markup, parse_mode="HTML")
    reply_markup = ReplyKeyboardMarkup(AGE_CONFIRM_KEYBOARD, resize_keyboard=True, one_time_keyboard=True)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=(
            "‚ö†Ô∏è –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n"
            "–°–æ–∑–¥–∞—Ç–µ–ª–∏ –±–æ—Ç–∞ –Ω–µ –Ω–µ—Å—É—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞.\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:"
        ),
        reply_markup=reply_markup,
    )

async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global DRINKS
    if not context.user_data.get('age_confirmed', False):
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç, –≤—ã–±—Ä–∞–≤ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        )
        return
    data = DRINKS
    global current_brand, current_flavor, total
    keyboard = [
        [InlineKeyboardButton(drink, callback_data=f"producer:{drink}:0") for drink in data["drinks"]]
    ]
    reply_markup = ReplyKeyboardMarkup(BUYKEYBOARD, resize_keyboard=True)
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç:", reply_markup=reply_markup)
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è:", reply_markup=reply_markup)
    
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if 'age_confirmed' not in context.user_data:
        if text == "–ú–Ω–µ –µ—Å—Ç—å 18 –ª–µ—Ç":
            context.user_data['age_confirmed'] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            reply_markup = ReplyKeyboardMarkup(BUYKEYBOARD, resize_keyboard=True)
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üòä",
                reply_markup=reply_markup
            )

        elif text == "–ú–Ω–µ –Ω–µ—Ç 18 –ª–µ—Ç":
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –±–æ—Ç. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
            )
            return

        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
            )
    if not context.user_data.get('age_confirmed', False):
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç, –≤—ã–±—Ä–∞–≤ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        )
        return
    if text == "–ö –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É":
        await buy(update, context)
    elif text == "–ö–æ—Ä–∑–∏–Ω–∞":
        reply_markup = ReplyKeyboardMarkup(CARTKEYBOARD, resize_keyboard=True)
        await context.bot.send_message(chat_id=update.effective_chat.id, text="üõí –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:", reply_markup=reply_markup)
        await show_cart(update, context)
    elif text == "–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞":
        reply_markup = ReplyKeyboardMarkup(BUYKEYBOARD, resize_keyboard=True)
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–û–±—Ä–∞—Ç–∏—Ç—å—Å—è: t.me/EmilBAD", reply_markup=reply_markup)
    elif text == "–ë–∞–ª–ª—ã":
        reply_markup = ReplyKeyboardMarkup(BUYKEYBOARD, resize_keyboard=True)
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", reply_markup=reply_markup)
    elif text == "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É":
        await clear_cart(update, context, DRINKS)
    elif text == "–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä":
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return WAITING_FOR_ITEM_NUMBER  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    elif text == "–û–ø–ª–∞—Ç–∞":
        await process_payment(update, context)

async def clear_cart(update, context, data_j):
    if not context.user_data.get('age_confirmed', False):
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç, –≤—ã–±—Ä–∞–≤ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        )
        return
    cart = context.user_data.pop("cart", {})
    print(cart)
    for brand, flavors in cart.items():
        for flavor, quantity in flavors.items():
            if brand in data_j["drinks"] and flavor in data_j["drinks"][brand]["flavors"]:
                data_j["drinks"][brand]["flavors"][flavor]["quantity"] += quantity

    await context.bot.send_message(chat_id=update.effective_chat.id, text="–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")

async def process_payment(update: Update, context: CallbackContext):
    if not context.user_data.get('age_confirmed', False):
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç, –≤—ã–±—Ä–∞–≤ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        )
        return
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∞'."""
    cart = context.user_data.get("cart", {})

    if not cart:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π."
        )
        return

    total = calculate_total(cart)

    payment_text = (
        f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {total}‚ÇΩ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ: +79534032798.\n"
        f"–≠–º–∏–ª—å –ë.\n"
        f"‚ö†Ô∏è –ù–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏–ª' —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞!"
    )

    payment_keyboard = ReplyKeyboardMarkup([
        ["–û–ø–ª–∞—Ç–∏–ª", "–û—Ç–º–µ–Ω–∞"]
    ], resize_keyboard=True, one_time_keyboard=True)

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=payment_text,
        reply_markup=payment_keyboard
    )

async def handle_payment_confirmation(update: Update, context: CallbackContext):
    if not context.user_data.get('age_confirmed', False):
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç, –≤—ã–±—Ä–∞–≤ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        )
        return
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."""
    text = update.message.text
    print(text)

    if text == "–û–ø–ª–∞—Ç–∏–ª":
        cart = context.user_data.get("cart", {})
        total = calculate_total(cart)
        chat_id = update.effective_chat.id

        cart_details = "\n".join([
            f"{brand} - {flavor}: {quantity} —à—Ç."
            for brand, flavors in cart.items()
            for flavor, quantity in flavors.items()
        ])

        admin_message = (
            f"üí∞ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}:\n"
            f"{cart_details}\n"
            f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total}‚ÇΩ"
        )

        for admin_id in ADMIN_ID:
            await context.bot.send_message(chat_id=admin_id, text=admin_message)

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ú–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ –≤ 217 –∫–æ–º–Ω–∞—Ç–µ",
            reply_markup=ReplyKeyboardMarkup(BUYKEYBOARD, resize_keyboard=True)
        )

        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        context.user_data.pop("cart", None)

    elif text == "–û—Ç–º–µ–Ω–∞":
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=ReplyKeyboardMarkup(BUYKEYBOARD, resize_keyboard=True)
        )


async def send_taste_messages(update: Update, context: CallbackContext, arg: str):
    if not context.user_data.get('age_confirmed', False):
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç, –≤—ã–±—Ä–∞–≤ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        )
        return
    global DRINKS
    data_j = DRINKS

    if "message_key" not in context.user_data:
        context.user_data["message_key"] = {}

    message_key = 0

    for taste, taste_info in data_j["drinks"][arg]["flavors"].items():
        text = f"{taste} - {taste_info['price']}—Ä\n–ö–æ–ª-–≤–æ: {taste_info['quantity']}—à—Ç"
        callback_data = f"taste:{taste}:{arg}"
        image_url = taste_info.get("image_url", None)  # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ JSON

        if int(taste_info['quantity']) > 0:
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=callback_data)]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            inactive_keyboard = [
                [InlineKeyboardButton("–ù–µ–∞–∫—Ç–∏–≤–Ω–æ", callback_data="none")]
            ]
            inactive_markup = InlineKeyboardMarkup(inactive_keyboard)

            if "message_key" in context.user_data and message_key in context.user_data["message_key"]:
                message_id = context.user_data["message_key"][message_key]
                try:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
                    await context.bot.edit_message_reply_markup(
                        chat_id=update.effective_chat.id,
                        message_id=message_id,
                        reply_markup=inactive_markup
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ URL —É–∫–∞–∑–∞–Ω
            if image_url:
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=image_url,
                    caption=text,
                    reply_markup=reply_markup
                )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                message = await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=text,
                    reply_markup=reply_markup
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if "message_key" not in context.user_data:
                context.user_data["message_key"] = {}

            context.user_data["message_key"][message_key] = message_key
            message_key += 1


async def update_taste_message(update: Update, context: CallbackContext, brand: str, taste: str):
    if not context.user_data.get('age_confirmed', False):
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç, –≤—ã–±—Ä–∞–≤ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        )
        return
    global DRINKS
    data_j = DRINKS
    taste_info = data_j["drinks"][brand]["flavors"][taste]
    new_quantity = taste_info["quantity"]
    price = taste_info["price"]

    if "message_ids" not in context.user_data:
        context.user_data["message_ids"] = {}

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    text = f"{taste} - {price}—Ä\n–ö–æ–ª-–≤–æ: {new_quantity}—à—Ç"
    callback_data = f"taste:{taste}:{brand}"

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=callback_data)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    message_id = context.user_data["message_ids"].get((brand, taste))
    if message_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=message_id,
                text=text,
                reply_markup=reply_markup
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def handle_buy(update: Update, context: CallbackContext):
    if not context.user_data.get('age_confirmed', False):
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç, –≤—ã–±—Ä–∞–≤ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        )
        return
    global current_brand, current_flavor
    query = update.callback_query
    await query.answer()
    data = query.data
    command, arg, arg2 = data.split(':')
    if command == "producer":
        await send_taste_messages(update, context, arg)
    elif command == "taste":
        current_brand = arg2
        current_flavor = arg
        await add_to_cart(update, context, arg, arg2)


async def add_to_cart(update: Update, context: CallbackContext, flavor: str, brand: str):
    if not context.user_data.get('age_confirmed', False):
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç, –≤—ã–±—Ä–∞–≤ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        )
        return
    global DRINKS, total
    data_j = DRINKS
    drink_data = data_j["drinks"][brand]["flavors"][flavor]
    if drink_data["quantity"] > 0:
        drink_data["quantity"] -= 1
        save_drinks(DRINKS)
        cart = context.user_data.setdefault("cart", {})
        cart[brand] = cart.get(brand, {})
        cart[brand][flavor] = cart[brand].get(flavor, 0) + 1

        total = calculate_total(cart)

        await update_taste_message(update, context, brand, flavor)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ—Ä–∑–∏–Ω–µ
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: {brand} - {flavor}\n–û–±—â–∞—è —Å—É–º–º–∞: {total}‚ÇΩ"
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, {brand} - {flavor} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è."
        )


async def show_cart(update: Update, context: CallbackContext):
    if not context.user_data.get('age_confirmed', False):
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç, –≤—ã–±—Ä–∞–≤ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        )
        return
    cart = context.user_data.get("cart", {}) 
    if not cart:
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
        )
        return

    cart_text = "\n"
    total = 0
    item_number = 1
    item_mapping = {}

    for brand, flavors in cart.items():
        for flavor, quantity in flavors.items():
            if quantity > 0:
                price_per_unit = DRINKS["drinks"][brand]["flavors"][flavor]["price"]
                total += price_per_unit * quantity
                cart_text += (
                    f"{item_number}. {brand} - {flavor}\n"
                    f"   –¶–µ–Ω–∞: {price_per_unit}‚ÇΩ, –ö–æ–ª-–≤–æ: {quantity}\n"
                )
                item_mapping[item_number] = (brand, flavor)
                item_number += 1

    cart_text += f"\n–û–±—â–∞—è —Å—É–º–º–∞: {total}‚ÇΩ"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –Ω–æ–º–µ—Ä–∞ –∫ —Ç–æ–≤–∞—Ä—É –≤ user_data
    context.user_data["item_mapping"] = item_mapping

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=cart_text
    )


async def remove_item_from_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('age_confirmed', False):
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç, –≤—ã–±—Ä–∞–≤ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        )
        return
    global WAITING_FOR_ITEM_NUMBER
    user_input = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —á–∏—Å–ª–æ
    if user_input.isdigit():
        item_number = int(user_input)
        await remove_by_number(update, context, item_number)
        await update.message.reply_text("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.")
        return WAITING_FOR_ITEM_NUMBER  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è

    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

remove_item_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.TEXT & filters.Regex("–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"), handle_text)],
    states={
        WAITING_FOR_ITEM_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, remove_item_from_cart)],
    },
    fallbacks=[MessageHandler(filters.COMMAND, cancel)],
)


async def remove_by_number(update: Update, context: CallbackContext, item_number: int):
    cart = context.user_data.get("cart", {})
    item_mapping = context.user_data.get("item_mapping", {})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä –ø–æ–¥ —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
    if item_number not in item_mapping:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä–∑–∏–Ω—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
    brand, flavor = item_mapping[item_number]

    if cart[brand][flavor] > 0:
        cart[brand][flavor] -= 1

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥
        DRINKS["drinks"][brand]["flavors"][flavor]["quantity"] += 1
        save_drinks(DRINKS)

        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–ª–æ 0
        if cart[brand][flavor] == 0:
            del cart[brand][flavor]
            if not cart[brand]:
                del cart[brand]

        total = calculate_total(cart)

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é
        await show_cart(update, context)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–£–¥–∞–ª—ë–Ω 1 —à—Ç. —Ç–æ–≤–∞—Ä–∞: {brand} - {flavor}\n–û–±—â–∞—è —Å—É–º–º–∞: {total}‚ÇΩ"
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–≠—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ."
        )

if __name__ == '__main__':
    application = ApplicationBuilder().token(TOKEN).build()

    start_handler = CommandHandler('start', start)
    buy_handler = CommandHandler('buy', buy)
    cart_handler = CommandHandler('cart', show_cart)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start (–≤—Å–µ–≥–¥–∞ –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ)
    application.add_handler(start_handler)

    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞)
    application.add_handler(buy_handler, group=0)
    application.add_handler(cart_handler, group=0)
    application.add_handler(remove_item_handler, group=0)
    application.add_handler(CallbackQueryHandler(handle_buy), group=0)
    application.add_handler(MessageHandler(filters.Regex("^–û–ø–ª–∞—Ç–∏–ª$"), handle_payment_confirmation), group=0)
    application.add_handler(MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), handle_payment_confirmation), group=0)
    application.add_handler(MessageHandler(filters.Regex("^–û–ø–ª–∞—Ç–∞$"), process_payment), group=0)

    # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text), group=0)

    application.run_polling()